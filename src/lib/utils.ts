import { type ClassValue, clsx } from 'clsx';
import { twMerge } from 'tailwind-merge';

// generated by shadcn
export const cn = (...inputs: ClassValue[]) => {
  return twMerge(clsx(inputs));
};

// created by chatgpt
export const isBaseImage = (imageData: string) => {
  const baseRegex = /^data:image\/(?:png|jpe?g|gif|webp);base64,/u;
  return baseRegex.test(imageData);
};

// created by chatgpt
export const formatDateString = (dateString: string) => {
  const options: Intl.DateTimeFormatOptions = {
    day: 'numeric',
    month: 'short',
    year: 'numeric',
  };

  const date = new Date(dateString);
  const formattedDate = date.toLocaleDateString(undefined, options);

  const time = date.toLocaleTimeString([], {
    hour: 'numeric',
    minute: '2-digit',
  });

  return `${time} - ${formattedDate}`;
};

// created by chatgpt
export const formatThreadCount = (count: number): string => {
  if (count === 0) {
    return 'No Threads';
  } else {
    const threadCount = count.toString().padStart(2, '0');
    const threadWord = count === 1 ? 'Thread' : 'Threads';
    return `${threadCount} ${threadWord}`;
  }
};
